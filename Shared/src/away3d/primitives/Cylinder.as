package away3d.primitives{	import away3d.arcane;	import away3d.core.base.SubGeometry;	import away3d.materials.MaterialBase;	use namespace arcane;	/**	 * A UV Cylinder primitive mesh.	 */	public class Cylinder extends PrimitiveBase	{		protected var _topRadius : Number;		protected var _bottomRadius : Number;		protected var _height : Number;		protected var _segmentsW : uint;		protected var _segmentsH : uint;		protected var _topClosed : Boolean;		protected var _bottomClosed : Boolean;		protected var _yUp : Boolean;		/**		 * @inheritDoc		 */		protected override function buildGeometry(target : SubGeometry) : void		{			var vertices : Vector.<Number>;			var vertexNormals : Vector.<Number>;			var vertexTangents : Vector.<Number>;			var indices : Vector.<uint>;			var i : uint, j : uint, triIndex : uint;			var numVerts : uint = (_segmentsW + 1) * (_segmentsH + 1);						if (_topClosed) numVerts += _segmentsW + 1;			if (_bottomClosed) numVerts += _segmentsW + 1;			if (numVerts == target.numVertices) {				vertices = target.vertexData;				vertexNormals = target.vertexNormalData;				vertexTangents = target.vertexTangentData;				indices = target.indexData;			}			else {				vertices = new Vector.<Number>(numVerts * 3, true);				vertexNormals = new Vector.<Number>(numVerts * 3, true);				vertexTangents = new Vector.<Number>(numVerts * 3, true);				var ind:uint = _segmentsH * _segmentsW * 6;				if (_topClosed) ind += _segmentsW * 3;				if (_bottomClosed) ind += _segmentsW * 3;				indices = new Vector.<uint>(ind, true);			}						numVerts = 0;			var baseInd:uint = 0;						if (_topClosed) {				baseInd = _segmentsW + 1;				for (i = 0; i <= _segmentsW; ++i) {					if (_yUp) {						vertexNormals[numVerts] = 0;						vertexTangents[numVerts] = 1;						vertices[numVerts++] = 0;						vertexNormals[numVerts] = 0;						vertexTangents[numVerts] = 0;						vertices[numVerts++] = _height*.5;						vertexNormals[numVerts] = 1;						vertexTangents[numVerts] = 0;						vertices[numVerts++] = 0;					}					else {						vertexNormals[numVerts] = 0;						vertexTangents[numVerts] = 1;						vertices[numVerts++] = 0;						vertexNormals[numVerts] = -1;						vertexTangents[numVerts] = 0;						vertices[numVerts++] = 0;						vertexNormals[numVerts] = 0;						vertexTangents[numVerts] = 0;						vertices[numVerts++] = -_height*.5;					}				}							}						var a : int, b : int, c : int, d : int;			for (j = 0; j <= _segmentsH; ++j) {				var rad : Number = _topRadius - ((j / _segmentsH) * (_topRadius - _bottomRadius));				var z : Number = -(_height/2) + (j / _segmentsH * _height);				for (i = 0; i <= _segmentsW; ++i) {					var verangle : Number = 2 * Math.PI * i / _segmentsW;					var x : Number = rad * Math.cos(verangle);					var y : Number = rad * Math.sin(verangle);					var normLen : Number = 1 / Math.sqrt(x * x + y * y + z * z);					var tanLen : Number = Math.sqrt(y * y + x * x);										if (_yUp) {						vertexNormals[numVerts] = x * normLen;						vertexTangents[numVerts] = tanLen > .007 ? -y / tanLen : 1;						vertices[numVerts++] = x;						vertexNormals[numVerts] = -z * normLen;						vertexTangents[numVerts] = 0;						vertices[numVerts++] = -z;						vertexNormals[numVerts] = y * normLen;						vertexTangents[numVerts] = tanLen > .007 ? x / tanLen : 0;						vertices[numVerts++] = y;					}					else {						vertexNormals[numVerts] = x * normLen;						vertexTangents[numVerts] = tanLen > .007 ? -y / tanLen : 1;						vertices[numVerts++] = x;						vertexNormals[numVerts] = y * normLen;						vertexTangents[numVerts] = tanLen > .007 ? x / tanLen : 0;						vertices[numVerts++] = y;						vertexNormals[numVerts] = z * normLen;						vertexTangents[numVerts] = 0;						vertices[numVerts++] = z;					}														if (topClosed && i > 0 && j == 0) {						a = i + baseInd;						b = i - 1 + baseInd;						indices[triIndex++] = a;						indices[triIndex++] = b;						indices[triIndex++] = i - 1;					}					if (i > 0 && j > 0) {						a = (_segmentsW + 1) * j + i + baseInd;						b = (_segmentsW + 1) * j + i - 1 + baseInd;						c = (_segmentsW + 1) * (j - 1) + i - 1 + baseInd;						d = (_segmentsW + 1) * (j - 1) + i + baseInd;						indices[triIndex++] = a;						indices[triIndex++] = b;						indices[triIndex++] = c;						indices[triIndex++] = a;						indices[triIndex++] = c;						indices[triIndex++] = d;					}					}			}			if (_bottomClosed) {				for (i = 0; i <= _segmentsW; ++i) {					if (_yUp) {						vertexNormals[numVerts] = 0;						vertexTangents[numVerts] = 1;						vertices[numVerts++] = 0;						vertexNormals[numVerts] = 0;						vertexTangents[numVerts] = 0;						vertices[numVerts++] = -_height*.5;						vertexNormals[numVerts] = 1;						vertexTangents[numVerts] = 0;						vertices[numVerts++] = 0;					}					else {						vertexNormals[numVerts] = 0;						vertexTangents[numVerts] = 1;						vertices[numVerts++] = 0;						vertexNormals[numVerts] = -1;						vertexTangents[numVerts] = 0;						vertices[numVerts++] = 0;						vertexNormals[numVerts] = 0;						vertexTangents[numVerts] = 0;						vertices[numVerts++] = _height*.5;					}				}				for (i = 0; i <= _segmentsW; ++i) {					if (i > 0) {						a = (_segmentsW + 1) * (_segmentsH + 1) + i + baseInd;						c = (_segmentsW + 1) * _segmentsH + i - 1 + baseInd;						d = (_segmentsW + 1) * _segmentsH + i + baseInd;						indices[triIndex++] = a;						indices[triIndex++] = c;						indices[triIndex++] = d;					}					}			}			target.updateVertexData(vertices);			target.updateVertexNormalData(vertexNormals);			target.updateVertexTangentData(vertexTangents);			target.updateIndexData(indices);		}		/**		 * @inheritDoc		 */		protected override function buildUVs(target : SubGeometry) : void		{			var i : int, j : int;			var numUvs : uint = (_segmentsH + 1) * (_segmentsW + 1) * 2;						var offsetInd:uint = 0;			var totalInd:uint = 0;			if (_topClosed) {				numUvs+=(_segmentsW + 1) * 2;				offsetInd = 1;				totalInd++;							}			if (_bottomClosed) {				numUvs+=(_segmentsW + 1) * 2;				totalInd++;			}						var uvData : Vector.<Number>;			if (target.UVData && numUvs == target.UVData.length)				uvData = target.UVData;			else				uvData = new Vector.<Number>(numUvs, true);			numUvs = 0;			if (_topClosed) { 				for (i = 0; i <= _segmentsW; ++i) {					uvData[numUvs++] = i / _segmentsW; 					uvData[numUvs++] = 0;				}			}			for (j = 0; j <= _segmentsH; ++j) {				for (i = 0; i <= _segmentsW; ++i) {					uvData[numUvs++] = i / _segmentsW;					uvData[numUvs++] = (j + offsetInd) / (_segmentsH + totalInd);				}			}			if (_bottomClosed) { 				for (i = 0; i <= _segmentsW; ++i) {					uvData[numUvs++] = i / _segmentsW; 					uvData[numUvs++] = 1;				}			}			target.updateUVData(uvData);		}				/**		 * The radius of the top end of the cylinder.		 */		public function get topRadius() : Number		{			return _topRadius;		}				public function set topRadius(value : Number) : void		{			_topRadius = value;			invalidateGeometry();		}				/**		 * The radius of the bottom end of the cylinder.		 */		public function get bottomRadius() : Number		{			return _bottomRadius;		}				public function set bottomRadius(value : Number) : void		{			_bottomRadius = value;			invalidateGeometry();		}		/**		 * The radius of the top end of the cylinder.		 */		public function get height() : Number		{			return _height;		}				public function set height(value : Number) : void		{			_height = value;			invalidateGeometry();		}				/**		 * Defines the number of horizontal segments that make up the cylinder. Defaults to 16.		 */		public function get segmentsW() : uint		{			return _segmentsW;		}				public function set segmentsW(value : uint) : void		{			_segmentsW = value;			invalidateGeometry();			invalidateUVs();		}				/**		 * Defines the number of vertical segments that make up the cylinder. Defaults to 1.		 */		public function get segmentsH() : uint		{			return _segmentsH;		}				public function set segmentsH(value : uint) : void		{			_segmentsH = value;			invalidateGeometry();			invalidateUVs();		}				/**		 * Defines whether the top end of the cylinder is closed (true) or open.		 */		public function get topClosed() : Boolean		{			return _topClosed;		}				public function set topClosed(value : Boolean) : void		{			_topClosed = value;			invalidateGeometry();		}				/**		 * Defines whether the bottom end of the cylinder is closed (true) or open.		 */		public function get bottomClosed() : Boolean		{			return _bottomClosed;		}				public function set bottomClosed(value : Boolean) : void		{			_bottomClosed = value;			invalidateGeometry();		}		/**		 * Defines whether the cylinder poles should lay on the Y-axis (true) or on the Z-axis (false).		 */		public function get yUp() : Boolean		{			return _yUp;		}				public function set yUp(value : Boolean) : void		{			_yUp = value;			invalidateGeometry();		}				/**		 * Creates a new Cylinder object.		 * @param material The material with which to render the cylinder.		 * @param topRadius The radius of the top end of the cylinder.		 * @param bottomRadius The radius of the bottom end of the cylinder		 * @param height The radius of the bottom end of the cylinder		 * @param segmentsW Defines the number of horizontal segments that make up the cylinder. Defaults to 16.		 * @param segmentsH Defines the number of vertical segments that make up the cylinder. Defaults to 1.		 * @param topClosed Defines whether the top end of the cylinder is closed (true) or open.		 * @param bottomClosed Defines whether the bottom end of the cylinder is closed (true) or open.		 * @param yUp Defines whether the cone poles should lay on the Y-axis (true) or on the Z-axis (false).		 */		public function Cylinder(material : MaterialBase = null, topRadius : Number = 50, bottomRadius : Number = 50, height : Number = 100, segmentsW : uint = 16, segmentsH : uint = 1, topClosed:Boolean = true, bottomClosed:Boolean = true, yUp : Boolean = true)		{			super(material);						_topRadius = topRadius;			_bottomRadius = bottomRadius;			_height = height;			_segmentsW = segmentsW;			_segmentsH = segmentsH;			_topClosed = topClosed;			_bottomClosed = bottomClosed;			_yUp = yUp;		}	}}